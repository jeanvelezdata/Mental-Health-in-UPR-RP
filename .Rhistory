# Renaming columns for ease of use
colnames(rp_data) <- c("ID", "START", "END", "EMAIL", "NAME", paste0("CON_COMP_", 1:10), "CONSENT", "SEX", "GENDER", "SEX_ORIENT",
"AGE", "HISP_ORIG", "RACE", "MARITAL_STAT", "MUNIC", "INCOME_YR", "EMPLOY", "OTHR_EMPLOY", "WRK_HRS_WK",
"LOST_JOB_CV19", "GOV_ASSIST_", "ACA_YR", "CRD_HRS", "FACUL", "ACA_LVL", "GPA_SR", "UNIV_ECON_AST", "TECH_ACSS",
"DIFF_ACSS", "PART_DROP", "EDUC_MOD", "PREEX_COND", "DEP_HIST", "DEP_TRT", "ANX_HIST", "ANX_TRT", "CV19_HIST",
"VAX_STAT", "VAX_TYPE", "VAX_DOSE", paste0("PHQ", 1:9), "PHQ_FUNC", paste0("GAD", 1:7), paste0("COV", 1:6),
paste0("PSS", 1:10), paste0("TILS", 1:3), "SOC_MED", "SM_TIME_DAY", "SM_TIME_WK_YAM", "SM_REAS", "SM_TIME_DAY_BP",
"SM_TIME_W_BP_YAM", "SM_REAS_BP", "SM_IMP_QOL", "VID_GMS", "VG_TYPE", "VG_VIOL", "VG_TIME_DAY", "VG_TIME_WK_YAM",
"VG_TIME_DAY_YAM", "VG_TIME_WK_DP_YAM", "VG_TIME_DAY_DP_YAM", "VG_REAS", "VG_TIME_DAY_BP", "VG_REAS_BP",
"VG_IMP_QOL", "EXER_LAST7", "EXER_DAYS_IN_LAST7", "EXER_DURAT_MIN", "SLEEP_HRS", "EAT_OUT", "EAT_FRT", "EAT_VEG",
"ALC", "ALC_30", "NICOT", "NICOT_TYPE", "NICOT_30", "CANNA", "CANNA_30", "COCAINE", "COC_TYPE","COC_POWD_30", "CRACK_30",
"MED", "MED_TYPE", "MED_30", "HALUC", "HALUC_TYPE", "HALUC_30")
# Replace other answers considered to be NA
na <- c("Prefiero no contestar", "Prefiero no contestar;", "Prefiero no contestar;Nada;",
"Prefiero no contestar;Cáncer;","No se", "no se", "No sé", "no sé",
"Prefiero no contestar;Hipoglucemica;", "Prefiero no contestar;Ninguna;", "",
"No recuerdo", "No tengo una respuesta al momento", "No estoy segura",
"No tengo conocimiento actual", "3.40?", "No sé", ".", "3->")
rp_data <- replace_with_na_all(rp_data, ~.x %in% na)
# Eliminate variables no necessary or containing information not needed for analysis
# This information might be useful for future researchers, but so far we only need CONSENT and CRD_HRS to assess eligibility
rp_data <- rp_data[,-which(colnames(rp_data) %in% c("EMAIL","NAME",paste0("CON_COMP_", 1:10)))]
# Now convert this into a function
separate_multi_resp <- function(data, col){
# Convert to character variable
data$col <- as.character(testy$TECH_ACSS)
# Split responses by semi-colon separator
resp.split <- strsplit(data$col, ";")
# Find number of levels or responses for the question
lev <- unique(unlist(resp.split))
# Create dummy variables
resp.dummy <- lapply(resp.split, function(x) table(factor(x, levels=lev)))
# Bind response table to data frame
data2 <- with(data, data.frame(col, do.call(rbind, resp.dummy)))
# Bind to original data
data3 <- cbind(data, data2[,2:length(lev)])
# Change column names
colnames(data3)[which(colnames(data3) %in% colnames(data2[,2:length(lev)]))] <- paste0(col, "_", colnames(data2[,2:length(lev)]))
# Delete original variable
final_data <- data3[,-which(colnames(data3) == col)]
# Return final result
return(head(final_data))
}
test_df <- separate_multi_resp(rp_data, "TECH_ACSS")
which(colnames(data3) == "TECH_ACSS")
which(colnames(rp_data) == "TECH_ACSS")
test_df$col
# Now convert this into a function
separate_multi_resp <- function(data, col){
# Convert to character variable
data$col <- as.character(testy$TECH_ACSS)
# Split responses by semi-colon separator
resp.split <- strsplit(data$col, ";")
# Find number of levels or responses for the question
lev <- unique(unlist(resp.split))
# Create dummy variables
resp.dummy <- lapply(resp.split, function(x) table(factor(x, levels=lev)))
# Bind response table to data frame
data2 <- with(data, data.frame(col, do.call(rbind, resp.dummy)))
# Bind to original data
data3 <- cbind(data, data2[,2:length(lev)])
# Change column names
colnames(data3)[which(colnames(data3) %in% colnames(data2[,2:length(lev)]))] <- paste0(col, "_", colnames(data2[,2:length(lev)]))
# Delete original variable
final_data <- data3[,-which(colnames(data3) == col)]
# Delete random "col" variable
final_data <- final_data[,-which(colnames(final_data) == "col")]
# Return final result
return(head(final_data))
}
test_df <- separate_multi_resp(rp_data, "TECH_ACSS")
table(rp_data$HALUC_TYPE)
multi_resp <- c("TECH_ACSS","HALUC_TYPE")
lapply(multi_resp, separate_multi_resp)
lapply(multi_resp, function(x) separate_multi_resp(rp_data, x))
test_df <- separate_multi_resp(rp_data, "HALUC_TYPE")
# Now convert this into a function
separate_multi_resp <- function(data, col){
# Convert to character variable
data$col <- as.character(data$col)
# Split responses by semi-colon separator
resp.split <- strsplit(data$col, ";")
# Find number of levels or responses for the question
lev <- unique(unlist(resp.split))
# Create dummy variables
resp.dummy <- lapply(resp.split, function(x) table(factor(x, levels=lev)))
# Bind response table to data frame
data2 <- with(data, data.frame(col, do.call(rbind, resp.dummy)))
# Bind to original data
data3 <- cbind(data, data2[,2:length(lev)])
# Change column names
colnames(data3)[which(colnames(data3) %in% colnames(data2[,2:length(lev)]))] <- paste0(col, "_", colnames(data2[,2:length(lev)]))
# Delete original variable
# final_data <- data3[,-which(colnames(data3) == col)]
# Delete random "col" variable -> still don't know why this happens
final_data <- final_data[,-which(colnames(final_data) == "col")]
# Return final result
return(head(final_data))
}
test_df <- separate_multi_resp(rp_data, "HALUC_TYPE")
# Now convert this into a function
separate_multi_resp <- function(data, col){
# Convert to character variable
data$col <- as.character(data$col)
# Split responses by semi-colon separator
resp.split <- strsplit(data$col, ";")
# Find number of levels or responses for the question
lev <- unique(unlist(resp.split))
# Create dummy variables
resp.dummy <- lapply(resp.split, function(x) table(factor(x, levels=lev)))
# Bind response table to data frame
data2 <- with(data, data.frame(col, do.call(rbind, resp.dummy)))
# Bind to original data
data3 <- cbind(data, data2[,2:length(lev)])
# Change column names
colnames(data3)[which(colnames(data3) %in% colnames(data2[,2:length(lev)]))] <- paste0(col, "_", colnames(data2[,2:length(lev)]))
# Delete original variable
final_data <- data3[,-which(colnames(data3) == col)]
# Delete random "col" variable -> still don't know why this happens
#final_data <- final_data[,-which(colnames(final_data) == "col")]
# Return final result
return(head(final_data))
}
test_df <- separate_multi_resp(rp_data, "HALUC_TYPE")
test_df <- rp_data
test_df <- separate_multi_resp(rp_data, col = "HALUC_TYPE")
test_df <- separate_multi_resp(rp_data, HALUC_TYPE)
# Now convert this into a function
separate_multi_resp <- function(data, col){
# Convert to character variable
data[[col]] <- as.character(data[[col]])
# Split responses by semi-colon separator
resp.split <- strsplit(data[[col]], ";")
# Find number of levels or responses for the question
lev <- unique(unlist(resp.split))
# Create dummy variables
resp.dummy <- lapply(resp.split, function(x) table(factor(x, levels=lev)))
# Bind response table to data frame
data2 <- with(data, data.frame(col, do.call(rbind, resp.dummy)))
# Bind to original data
data3 <- cbind(data, data2[,2:length(lev)])
# Change column names
colnames(data3)[which(colnames(data3) %in% colnames(data2[,2:length(lev)]))] <- paste0(col, "_", colnames(data2[,2:length(lev)]))
# Delete original variable
final_data <- data3[,-which(colnames(data3) == col)]
# Delete random "col" variable -> still don't know why this happens
#final_data <- final_data[,-which(colnames(final_data) == "col")]
# Return final result
return(head(final_data))
}
# Now convert this into a function
separate_multi_resp <- function(data, col){
# Convert to character variable
data[[col]] <- as.character(data[[col]])
# Split responses by semi-colon separator
resp.split <- strsplit(data[[col]], ";")
# Find number of levels or responses for the question
lev <- unique(unlist(resp.split))
# Create dummy variables
resp.dummy <- lapply(resp.split, function(x) table(factor(x, levels=lev)))
# Bind response table to data frame
data2 <- with(data, data.frame(col, do.call(rbind, resp.dummy)))
# Bind to original data
data3 <- cbind(data, data2[,2:length(lev)])
# Change column names
colnames(data3)[which(colnames(data3) %in% colnames(data2[,2:length(lev)]))] <- paste0(col, "_", colnames(data2[,2:length(lev)]))
# Delete original variable
final_data <- data3[,-which(colnames(data3) == col)]
# Delete random "col" variable -> still don't know why this happens
#final_data <- final_data[,-which(colnames(final_data) == "col")]
# Return final result
return(final_data)
# Print head of results
print(head(final_data))
}
test_df <- rp_data
test_df <- separate_multi_resp(rp_data, "HALUC_TYPE")
test_df <- separate_multi_resp(rp_data, "MED_TYPE")
test_df <- separate_multi_resp(rp_data, "HALUC_TYPE")
test_df <- separate_multi_resp(test_df, "MED_TYPE")
# Vectorize the function to wor with multiple column names
testy <- rp_data
result_list <- lapply(c("TECH_ACSS","HALUC_TYPE","MED_TYPE"), function(col) {
separate_multi_resp(your_data, col)
})
result_list <- lapply(c("TECH_ACSS","HALUC_TYPE","MED_TYPE"), function(col) {
separate_multi_resp(testy, col)
})
result_list
result_list <- as.data.frame(lapply(c("TECH_ACSS","HALUC_TYPE","MED_TYPE"), function(col) {
separate_multi_resp(testy, col)
}))
library(haven)
install.packages("haven")
library(haven)
setwd("E:/CFA_Natalia_MGH")
cfaFolder <- "E:/CFA_Natalia_MGH"
cfaFolder <- "E:/CFA_Natalia_MGH"
raw_ebpas <- read_sav(file.path(cfaFolder, "Dissproject-dataset1rawdata copy"))
raw_ebpas <- read_sav("Dissproject-dataset1rawdata copy.sav")
View(raw_ebpas)
apply(raw_ebpas, MARGIN = 2, fun = function(x) length(which(is.na(x))))
apply(raw_ebpas, MARGIN = 2, FUN = function(x) length(which(is.na(x))))
setwd("E:/CFA_Natalia_MGH")
cfaFolder <- "E:/CFA_Natalia_MGH"
dataFolder <- "E:/CFA_Natalia_MGH/Data"
library(readr)
dataFolder <- file.path(cfaFolder, "Data")
raw_ebpas_prof <- read_csv(dataFolder, "DataDissertationProjectEmails to professionals")
raw_ebpas_prof <- read_csv(dataFolder, "DataDissertationProjectEmails to professionals")
raw_ebpas_conf <- read_csv(dataFolder, "DataDissertationProjectInpersonconference")
raw_ebpas_prof <- read_csv(dataFolder, "DataDissertationProjectEmails to professionals")
raw_ebpas_prof <- read_csv(dataFolder, "DataDissertationProjectEmails to professionals")
setwd("E:/CFA_Natalia_MGH")
cfaFolder <- "E:/CFA_Natalia_MGH"
dataFolder <- file.path(cfaFolder, "Data")
library(readr)
raw_ebpas_prof <- read_csv(dataFolder, "DataDissertationProjectEmails to professionals")
raw_ebpas_prof <- read_csv(file.pth(dataFolder, "DataDissertationProjectEmails to professionals"))
raw_ebpas_prof <- read_csv(file.path(dataFolder, "DataDissertationProjectEmails to professionals"))
cfaFolder <- "E:/CFA_Natalia_MGH"
dataFolder <- file.path(cfaFolder, "Data")
dataFolder <- file.path("E:/CFA_Natalia_MGH/Data")
library(readr)
raw_ebpas_prof <- read_csv(file.path(dataFolder, "DataDissertationProjectEmails to professionals"))
raw_ebpas_prof <- read_csv(dataFolder, "DataDissertationProjectEmails to professionals.csv")
library(readr)
raw_ebpas_prof <- read_csv(dataFolder, "DataDissertationProjectEmails to professionals.csv")
raw_ebpas_prof <- read_csv("Data/DataDissertationProjectEmails to professionals.csv")
raw_ebpas_conf <- read_csv("Data/DataDissertationProjectInpersonconference.csv")
raw_ebpas_online <- read_csv("Data/DataDissertationProjectOnlineSocialMedia.csv")
View(raw_ebpas_prof)
raw_ebpas_prof$svy_type <- rep("Email", length(raw_ebpas_prof)
rep("Email", length(raw_ebpas_prof)
raw_ebpas_prof$svy_type <- rep("Email", length(raw_ebpas_prof))
length(raw_ebpas_prof)
raw_ebpas_prof$svy_type <- "Email"
raw_ebpas_conf$svy_type <- "Conference"
raw_ebpas_online$svy_type <- "Social Media"
View(raw_ebpas_conf)
View(raw_ebpas_online)
raw_ebpas <- rbind(raw_ebpas_prof,
raw_ebpas_conf[,3:length(raw_ebpas_conf)],
raw_ebpas_online[,3:length(raw_ebpas_online)])
which(!colnames(raw_ebpas_prof) %in% colnames(raw_ebpas_conf))
raw_ebpas_prof[,which(!colnames(raw_ebpas_prof) %in% colnames(raw_ebpas_conf))]
colnames(raw_ebpas_prof[,which(!colnames(raw_ebpas_prof) %in% colnames(raw_ebpas_conf))])
raw_ebpas_prof[1,which(!colnames(raw_ebpas_prof) %in% colnames(raw_ebpas_conf))]
which(!colnames(raw_ebpas_prof) %in% colnames(raw_ebpas_conf))
raw_ebpas_prof[1,18]
raw_ebpas_prof[1,31]
raw_ebpas_prof[1,55]
raw_ebpas_prof[1,]
colnames(raw_ebpas_prof) <- raw_ebpas_prof[1,]
head(raw_ebpas_prof)
raw_ebpas_prof <- raw_ebpas_prof[-c(1,2),]
head(raw_ebpas_prof)
# Professional Conference
colnames(raw_ebpas_conf) <- raw_ebpas_conf[1,]
raw_ebpas_conf <- raw_ebpas_conf[-c(1,2),]
# Social Media
colnames(raw_ebpas_online) <- raw_ebpas_online[1,]
raw_ebpas_online <- raw_ebpas_online[-c(1,2),]
head(raw_ebpas_conf)
head(raw_ebpas_online)
raw_ebpas_prof[1,18]
which(!colnames(raw_ebpas_prof) %in% colnames(raw_ebpas_online))
which(!colnames(raw_ebpas_conf) %in% colnames(raw_ebpas_online))
which(!colnames(raw_ebpas_prof) %in% colnames(raw_ebpas_conf))
which(!colnames(raw_ebpas_prof) %in% colnames(raw_ebpas_online))
which(!colnames(raw_ebpas_conf) %in% colnames(raw_ebpas_online))
colnames(raw_ebpas_prof[1,a]
colnames(raw_ebpas_prof[1,a])
a <- which(!colnames(raw_ebpas_prof) %in% colnames(raw_ebpas_conf))
b <- which(!colnames(raw_ebpas_prof) %in% colnames(raw_ebpas_online))
c <- which(!colnames(raw_ebpas_conf) %in% colnames(raw_ebpas_online))
colnames(raw_ebpas_prof[1,a])
colnames(raw_ebpas_prof[1,b])
colnames(raw_ebpas_conf[1,c])
c
a == c
length(a)
length(c)
View(raw_ebpas_conf)
data.frame(colnames(raw_ebpas_online),
colnames(raw_ebpas_conf),
colnames(raw_ebpas_prof))
cbind(colnames(raw_ebpas_online),
colnames(raw_ebpas_conf),
colnames(raw_ebpas_prof))
View(raw_ebpas_online)
grep(colnames(raw_ebpas_online), "Can you verify you are not a robot?")
grep(colnames(raw_ebpas_online), "Can you verify you are not a robot?", ignore.case = T)
colnames(raw_ebpas_online)
length(which(is.na(raw_ebpas_online$`Can you verify you are not a robot. - Browser`)))
length(which(is.na(raw_ebpas_online$`Can you verify you are not a robot. - Operating System`)))
length(which(is.na(raw_ebpas_online$`Can you verify you are not a robot. - Resolution`)))
length(which(is.na(raw_ebpas_online$`Can you verify you are not a robot. - Version`)))
raw_ebpas_online <- raw_ebpas_online[,-c("Can you verify you are not a robot. - Browser",
"Can you verify you are not a robot. - Operating System",
"Can you verify you are not a robot. - Resolution",
"Can you verify you are not a robot. - Version")]
raw_ebpas_online <- raw_ebpas_online[,-c("Can you verify you are not a robot. - Browser",
"Can you verify you are not a robot. - Operating System",
"Can you verify you are not a robot. - Resolution",
"Can you verify you are not a robot. - Version")]
robot_verif <- which(colnames(rawebpas_online) %in% c("Can you verify you are not a robot. - Browser",
"Can you verify you are not a robot. - Operating System",
"Can you verify you are not a robot. - Resolution",
"Can you verify you are not a robot. - Version"))
robot_verif <- which(colnames(raw_ebpas_online) %in% c("Can you verify you are not a robot. - Browser",
"Can you verify you are not a robot. - Operating System",
"Can you verify you are not a robot. - Resolution",
"Can you verify you are not a robot. - Version"))
robot_verif
raw_ebpas_online <- raw_ebpas_online[,-robot_verif]
VIew(raw_ebpas_prof)
View(raw_ebpas_prof)
colnames(raw_ebpas_conf) == colnames(raw_ebpas_online)
colnames(raw_ebpas_online)[18:length(raw_ebpas_online)]
colnames(raw_ebpas_conf)[18:length(raw_ebpas_conf)]
c(colnames(raw_ebpas_conf)[18:length(raw_ebpas_conf)]) == colnames(raw_ebpas_online)
c(colnames(raw_ebpas_conf)[18:length(raw_ebpas_conf)])
c(unlist(colnames(raw_ebpas_conf)[18:length(raw_ebpas_conf)]))
raw_ebpas_conf[,length(colnames(raw_ebpas_conf)) - 1]
length(which(is.na(raw_ebpas_conf[,length(colnames(raw_ebpas_conf)) - 1])))
length(which(!is.na(raw_ebpas_conf[,length(colnames(raw_ebpas_conf)) - 1])))
which(!is.na(raw_ebpas_conf[,length(colnames(raw_ebpas_conf)) - 1]))
table(raw_ebpas_conf[,length(colnames(raw_ebpas_conf)) - 1])
grep(". ", colnames(raw_ebpas_conf), ignore.case = T)
grep("1. ", colnames(raw_ebpas_conf), ignore.case = T)
grep(" . ", colnames(raw_ebpas_conf), ignore.case = T)
x <- grep(" . ", colnames(raw_ebpas_conf), ignore.case = T)
# Truncate question number from columns in raw_ebpas_conf
colnames(raw_ebpas_conf)[x]
which(colnames(raw_ebpas_conf) == "Do yo consent to participate in this study?")
which(colnames(raw_ebpas_conf) == "Do you consent to participate in this study?")
# Set working directory
setwd("E:/CFA_Natalia_MGH")
# Import data
library(readr)
raw_ebpas_prof <- read_csv("Data/DataDissertationProjectEmails to professionals.csv")
raw_ebpas_conf <- read_csv("Data/DataDissertationProjectInpersonconference.csv")
raw_ebpas_online <- read_csv("Data/DataDissertationProjectOnlineSocialMedia.csv")
# Eliminate Q_ type column names and add actual column names and eliminate first two
# rows for redundancy
# Professional email
colnames(raw_ebpas_prof) <- raw_ebpas_prof[1,]
raw_ebpas_prof <- raw_ebpas_prof[-c(1,2),]
# Professional Conference
colnames(raw_ebpas_conf) <- raw_ebpas_conf[1,]
raw_ebpas_conf <- raw_ebpas_conf[-c(1,2),]
# Social Media
colnames(raw_ebpas_online) <- raw_ebpas_online[1,]
raw_ebpas_online <- raw_ebpas_online[-c(1,2),]
# Eliminate Robot verificaction columns in raw_ebpas_online. All are empty.
robot_verif <- which(colnames(raw_ebpas_online) %in% c("Can you verify you are not a robot. - Browser",
"Can you verify you are not a robot. - Operating System",
"Can you verify you are not a robot. - Resolution",
"Can you verify you are not a robot. - Version"))
raw_ebpas_online <- raw_ebpas_online[,-robot_verif]
# Eliminate email address column for sending participant compensation
raw_ebpas_prof <- raw_ebpas_prof[,length(colnames(raw_ebpas_prof))]
raw_ebpas_conf <- raw_ebpas_conf[,length(colnames(raw_ebpas_conf))]
raw_ebpas_online <- raw_ebpas_online[,length(colnames(raw_ebpas_online))]
View(raw_ebpas_prof)
raw_ebpas_prof <- read_csv("Data/DataDissertationProjectEmails to professionals.csv")
raw_ebpas_conf <- read_csv("Data/DataDissertationProjectInpersonconference.csv")
raw_ebpas_online <- read_csv("Data/DataDissertationProjectOnlineSocialMedia.csv")
View(raw_ebpas_prof)
View(raw_ebpas_conf)
View(raw_ebpas_online)
# Eliminate Q_ type column names, add actual column names and eliminate first two
# rows for redundancy
# Professional email
colnames(raw_ebpas_prof) <- raw_ebpas_prof[1,]
raw_ebpas_prof <- raw_ebpas_prof[-c(1,2),]
# Professional Conference
colnames(raw_ebpas_conf) <- raw_ebpas_conf[1,]
raw_ebpas_conf <- raw_ebpas_conf[-c(1,2),]
# Social Media
colnames(raw_ebpas_online) <- raw_ebpas_online[1,]
raw_ebpas_online <- raw_ebpas_online[-c(1,2),]
# Eliminate Robot verificaction columns in raw_ebpas_online. All are empty.
robot_verif <- which(colnames(raw_ebpas_online) %in% c("Can you verify you are not a robot. - Browser",
"Can you verify you are not a robot. - Operating System",
"Can you verify you are not a robot. - Resolution",
"Can you verify you are not a robot. - Version"))
robot_verif
raw_ebpas_online <- raw_ebpas_online[,-robot_verif]
# Eliminate email address column for sending participant compensation
raw_ebpas_prof <- raw_ebpas_prof[,-length(colnames(raw_ebpas_prof))]
raw_ebpas_conf <- raw_ebpas_conf[,-length(colnames(raw_ebpas_conf))]
raw_ebpas_online <- raw_ebpas_online[,-length(colnames(raw_ebpas_online))]
subtr(char, start = 3)
char <- "Titty titty bang bang nigga"
subtr(char, start = 3)
char <- "Titty titty bang bang nigga"
substr(char, start = 3)
substring(char, start = 3)
substring(char, 3)
char <- c("Titty titty bang bang nigga", "Bouncy titties")
substring(char, 3)
length(colnames(raw_ebpas_conf))
# Truncate question number from columns in raw_ebpas_conf
numbered_cols <- c((which(colnames(raw_ebpas_conf) == "Do you consent to participate in this study?")+1):
length(colnames(raw_ebpas_conf)))
colnames(raw_ebpas_conf)[numbered_cols] <-  substring(colnames(raw_ebpas_conf)[numbered_cols], 5)
# Set working directory
setwd("E:/CFA_Natalia_MGH")
# Import data
library(readr)
raw_ebpas_prof <- read_csv("Data/DataDissertationProjectEmails to professionals.csv")
raw_ebpas_conf <- read_csv("Data/DataDissertationProjectInpersonconference.csv")
raw_ebpas_online <- read_csv("Data/DataDissertationProjectOnlineSocialMedia.csv")
# Eliminate Q_ type column names, add actual column names and eliminate first two
# rows for redundancy
# Professional email
colnames(raw_ebpas_prof) <- raw_ebpas_prof[1,]
raw_ebpas_prof <- raw_ebpas_prof[-c(1,2),]
# Professional Conference
colnames(raw_ebpas_conf) <- raw_ebpas_conf[1,]
raw_ebpas_conf <- raw_ebpas_conf[-c(1,2),]
# Social Media
colnames(raw_ebpas_online) <- raw_ebpas_online[1,]
raw_ebpas_online <- raw_ebpas_online[-c(1,2),]
# Eliminate Robot verificaction columns in raw_ebpas_online. All are empty.
robot_verif <- which(colnames(raw_ebpas_online) %in% c("Can you verify you are not a robot. - Browser",
"Can you verify you are not a robot. - Operating System",
"Can you verify you are not a robot. - Resolution",
"Can you verify you are not a robot. - Version"))
raw_ebpas_online <- raw_ebpas_online[,-robot_verif]
# Eliminate email address column for sending participant compensation
raw_ebpas_prof <- raw_ebpas_prof[,-length(colnames(raw_ebpas_prof))]
raw_ebpas_conf <- raw_ebpas_conf[,-length(colnames(raw_ebpas_conf))]
raw_ebpas_online <- raw_ebpas_online[,-length(colnames(raw_ebpas_online))]
# Truncate question number from columns in raw_ebpas_conf
numbered_cols <- c((which(colnames(raw_ebpas_conf) == "Do you consent to participate in this study?")+1):
length(colnames(raw_ebpas_conf)))
colnames(raw_ebpas_conf)[numbered_cols] <-  substring(colnames(raw_ebpas_conf)[numbered_cols], 4)
# Import data
library(readr)
raw_ebpas_prof <- read_csv("Data/DataDissertationProjectEmails to professionals.csv")
raw_ebpas_conf <- read_csv("Data/DataDissertationProjectInpersonconference.csv")
raw_ebpas_online <- read_csv("Data/DataDissertationProjectOnlineSocialMedia.csv")
# Eliminate Q_ type column names, add actual column names and eliminate first two
# rows for redundancy
# Professional email
colnames(raw_ebpas_prof) <- raw_ebpas_prof[1,]
raw_ebpas_prof <- raw_ebpas_prof[-c(1,2),]
# Professional Conference
colnames(raw_ebpas_conf) <- raw_ebpas_conf[1,]
raw_ebpas_conf <- raw_ebpas_conf[-c(1,2),]
# Social Media
colnames(raw_ebpas_online) <- raw_ebpas_online[1,]
raw_ebpas_online <- raw_ebpas_online[-c(1,2),]
# Eliminate Robot verificaction columns in raw_ebpas_online. All are empty.
robot_verif <- which(colnames(raw_ebpas_online) %in% c("Can you verify you are not a robot. - Browser",
"Can you verify you are not a robot. - Operating System",
"Can you verify you are not a robot. - Resolution",
"Can you verify you are not a robot. - Version"))
raw_ebpas_online <- raw_ebpas_online[,-robot_verif]
# Eliminate email address column for sending participant compensation
raw_ebpas_prof <- raw_ebpas_prof[,-length(colnames(raw_ebpas_prof))]
raw_ebpas_conf <- raw_ebpas_conf[,-length(colnames(raw_ebpas_conf))]
raw_ebpas_online <- raw_ebpas_online[,-length(colnames(raw_ebpas_online))]
# View(raw_ebpas_prof)
View(raw_ebpas_conf)
# Truncate question number from columns in raw_ebpas_conf
numbered_cols <- c((which(colnames(raw_ebpas_conf) == "Do you consent to participate in this study?")+1):
length(colnames(raw_ebpas_conf)))
colnames(raw_ebpas_conf)[numbered_cols] <-  substring(colnames(raw_ebpas_conf)[numbered_cols], 4)
colnames(raw_ebpas_online) == colnames(raw_ebpas_conf)
colnames(raw_ebpas_online) == colnames(raw_ebpas_prof)
which(colnames(raw_ebpas_online) != colnames(raw_ebpas_conf))
head(raw_ebpas_online[,which(colnames(raw_ebpas_online) != colnames(raw_ebpas_conf))])
View(raw_ebpas_online[,which(colnames(raw_ebpas_online) != colnames(raw_ebpas_conf))])
which(colnames(raw_ebpas_online) %in% colnames(raw_ebpas_conf))
which(!colnames(raw_ebpas_online) %in% colnames(raw_ebpas_conf))
grep("I am paying attention", colnames(raw_ebpas_prof), ignore.case = T)
grep("Estoy prestando", colnames(raw_ebpas_conf), ignore.case = T)
a <- grep("I am paying attention", colnames(raw_ebpas_prof), ignore.case = T)
b <- grep("Estoy prestando", colnames(raw_ebpas_conf), ignore.case = T)
raw_ebpas_prof[,a]
table(raw_ebpas_prof[,a], useNA = "always")
table(raw_ebpas_prof[,b], usaNA = "always")
# Add survey type variable
raw_ebpas_prof$svy_type <- "Email"
table(raw_ebpas_prof[,b], usaNA = "always")
table(raw_ebpas_conf[,b], usaNA = "always")
b
table(raw_ebpas_conf[,b], useNA = "always")
library(plyr)
?rbind.fill
test <- rbind.fill(raw_ebpas_conf,raw_ebpas_online,raw_ebpas_prof)
install.packages("pewmethods")
citation(pewmethods)
library(devtools)
install_github("pewmethods")
install_github("pewresearch/pewmethods", build_vignettes = TRUE)
library(pewmethods)
library("pewresearch/pewmethods")
library("pewresearch")
install.packages("tidyverse")
install_github("pewresearch/pewmethods", build_vignettes = TRUE)
library(pewmethods)
citation(pewmethods)
citation("pewmethods")
install.packages("cvsem")
library(cvsem)
citation("cvsem")
?citation("cvsem")
